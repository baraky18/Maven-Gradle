/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/java_library_plugin.html
 */

/*
 * to find out all of gradle's plugins we should go to https://plugins.gradle.org
 */
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

/*
 * defining properties
 */
ext {
	images = 'C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\images'
	jpg = 'C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\jpg'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

/*
 * these are the customized tasks
 */
 task dependedOnProperty{
 	/*
 	* we can see all of the groups in the cmd console when we search for all tasks. we can see the group also in the "Gradle Tasks" tab
 	* in eclipse. we can also run tasks from that tab
 	*/
 	group "Custom"
 	description "In my custom tasks, the name of my task is myCustomTask"
 	doFirst{
 		println "This is done first";
 	}
 	doLast{
 		println "This is done last";
 	}
 }
 
 /*
 * to copy a file we need to put type as "Copy" and defining the source folder and target folder
 */
  task copyFile(type: Copy){
 	group "Custom"
 	description "copy file"
 	//note that when writing a path, it should be with double "\"
 	from 'C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\Instructions\\instructions.txt'
 	into 'C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\Instructions\\copyfiles'
 }	
 
 /*
 * we can copy a file using a predefined property of a folder (like 'images') and we can use wildcards 
 * to define which types of files we want to copy (like '*.jpg')
 */
   task copyJpgs(type: Copy){
 	group "Custom"
 	description "copy file advanced"
 	from(images){
 		include '*.jpg'
 	}
 	into(jpg)
 }	
 
  task doOperation1{
 	group "Custom"
 	description "do operation 1"
 	doFirst{
 		println "doOperation1 executed";
 	}
 }
 
 /*
 * when marking a task in "dependsOn", that means that whenever this task is executed, the task it depended on will be
 * executed first. so for example: if I am running doOperation2, doOperation1 will run before
 */
   task doOperation2(dependsOn: 'doOperation1'){
 	group "Custom"
 	description "do operation 2"
 	doFirst{
 		println "doOperation2 executed";
 	}
 }
 
 /*
 * when marking a task in "finalizedBy", that means that whenever this task is executed, the "finalizedBy" task will be
 * executed after. so for example: if I am running doOperation3, doOperation4 will run after
 */
   task doOperation3{
 	group "Custom"
 	description "do operation 3"
 	finalizedBy "doOperation4"
 	doFirst{
 		println "doOperation3 executed";
 	}
 }
 
   task doOperation4{
 	group "Custom"
 	description "do operation 4"
 	doFirst{
 		println "doOperation4 executed";
 	}
 }
 
  /*
 * when marking a task in "shouldRunAfter", that means that whenever this two tasks are executed, 
 * the task in "shouldRunAfter" will run first.
 * so for example: if I am running doOperation5 and doOperation6, doOperation6 will run before
 */
   task doOperation5{
 	group "Custom"
 	description "do operation 5"
 	shouldRunAfter "doOperation6"
 	doFirst{
 		println "doOperation5 executed";
 	}
 }
 
   task doOperation6{
 	group "Custom"
 	description "do operation 6"
 	doFirst{
 		println "doOperation6 executed";
 	}
 }
 
 /*
 * to create a zip file we need to put type as "Zip" and defining the source folder, target folder and file name
 */
   task zipFile(type: Zip){
 	group "Custom"
 	description "zip file"
 	from 'C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\Instructions\\instructions.txt'
 	destinationDirectory = file('C:\\Users\\baraky\\workspace\\Gradle\\src\\main\\java\\Instructions\\copyfiles')
 	archiveFileName = 'instructions.zip'
 }
 
 /*
 * we can define custom typed tasks in the below manner. we can define a property in the typed task itself and use it
 * in the task that's using the tayped task (like task "helloName")
 */
 class HelloNameTask extends DefaultTask{
 	String firstName
 	@TaskAction
 	void doAction(){
 		println "Hello, $firstName"
 	}
 }
 
 task helloName(type: HelloNameTask){
 	firstName = "Jeremy"
 }
 
 /*
 * these are the conditions of running tasks. so for example, if I will run task dependedOnProperty with no "doMyCustomTask" property,
 * it would be skipped.
 */
 dependedOnProperty.onlyIf{
 	project.hasProperty('doMyCustomTask')
 }